#swagger generate server -f matches.yml -A matches
#go run ../../go-swagger/go-swagger/cmd/swagger/swagger.go generate server -f matches.yml -A matches
#go run main.go --port=4450
swagger: "2.0"
info:
  description: "The matches service of IAFoosball"
  version: "2.0.x Beta"
  title: "Matches-Service"
  termsOfService: "http://iafoosball.aau.dk/terms/"
  contact:
    email: "jonas.burster@gmail.com"
host: "iafoosball.aau.dk"
schemes:
- "http"
produces:
- "application/json"
paths:
  /goals:
    post:
      summary: "Create a new goal. The tables only sends information gathered by it.
                This means information included here must be match id, the side of the goal and the datetime."
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Goal"
      responses:
        200:
          description: "Successful created goal"
  /goals/{goal_id}:
    get:
      summary: Should this be allowed???? Get a single goal.
      parameters:
      - in: "path"
        name: "goal_id"
        description: The goal id.
        type: string
        required: true
      responses:
        200:
          description: "Successful created goal"
  /matches/:
    get:
      summary: "Get a page of Recipients. Sort and Order can not be empty strings, don't define them if you don't need them."
      parameters:
      - in: "query"
        name: "filter"
        description: "Not Implemented!!! Filter parameters for the matches.
        Hopefully looks something like goals_red>10"
        type: "string"
        default: ""
      - in: "query"
        name: "sort"
        description: "The default is new matches at the top."
        type: "string"
        default: "end_time"
      - in: "query"
        name: "start"
        description: "The starting item of the list."
        type: "integer"
        minimum: 1
        default: 1
      - in: "query"
        name: "order"
        description: "Order ascending or descending, either ASC or DESC. DESC the default value in order to return latest matches first."
        type: "string"
        default: "DESC"
      - in: "query"
        name: "size"
        description: "The number of items to be returned. Defaults to 5, max is 10000."
        type: "integer"
        maximum: 10000
        minimum: 1
        default: 5
      responses:
        200:
          description: "Successful."
          schema:
            $ref: "#/definitions/PagedMatches"

    post:
      summary: "Create a new match"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The match information."
        required: true
        schema:
          $ref: "#/definitions/Match"
      responses:
        200:
          description: "Successful."

#  /matches/{match_id}:
#    get:
#      summary: "Returns the match data for the specified match id."
#      parameters:
#        - in: "path"
#          name: "match_id"
#          description: "The match id."
#          type: string
#          required: true
#      responses:
#        200:
#          description: "Successful."


definitions:
  Goal:
    type: object
    properties:
      _id:
        type: string
        description: The goal id, which is the collection + "/" + the key
        example: "goals/01234"
      _key:
        type: string
        description: The goal key
        example: "012345"
      _from:
        type: string
        description: The match id
        example: "matches/01234"
      _to:
        type: string
        description: Same as from
        example: "matches/01234"
      goal_id:
        type: string
        description: The unique match id.
      side:
        type: string
        description: The side who scored the goal. Usually either red or blue.
      position_attack:
        type: boolean
        description: This could be used in a double game, if the person attacking scores.
      datetime:
        type: string
        description: The datetime in nanoseconds of the goal.
        example: "1257856852039812612 - Do we want to put additional information here?"

  Match:
    type: object
    properties:
#      Match properties
      _id:
        type: string
        description: The match id which is the collection + "/" + the key
        example: "matches/01234"
      _key:
        type: string
        description: The match key
        example: "012345"
      start_time:
        type: string
        description: the datetime when the game ends
      end_time:
        type: string
        description: the datetime when the match ends
      completed:
        type: boolean
        description: Was the game completed.
      winner:
        type: string
        description: Can be either "red" or "blue"
      max_goals:
        type: integer
        description: The maximum number of goals for this game. If a time is specified the first criteria which is true will stop the match.
        default: 10
      max_time:
        type: integer
        description: The maximum tim in sec for this game. If a max goals is specified the first criteria which is true will stop the match.
      rated_match:
        type: boolean
        description: A match can be rated, ie a ranked game with points, or without.
      switch_position:
        type: boolean
        description: Switch the position after 50% of the goal (time or goals) is reached.
#      Players properties
      blue_one_id:
        type: string
        description: This is the user id of the first player playing on the blue side.
      blue_one_position:
        type: array
        items:
          type: string
        description: The position of the blue user 1. As this can vary during a game, use the notatation datetime\position
        example: [12341234/attack,12341245/defense]
      blue_two_id:
        type: string
        description: This is the user id of the second player playing on the blue side. (Not used in single)
      blue_two_position:
        type: array
        items:
          type: string
        description: The position of the blue user 2. As this can vary during a game, use the notatation datetime\position
        example: [12341234/attack,12341245/defense]
      red_one_id:
        type: string
        description: This is the user id of the first player playing on the red side.
      red_one_position:
        type: array
        items:
          type: string
        description: The position of the red user 1. As this can vary during a game, use the notatation datetime\position
        example: [12341234/attack,12341245/defense]
      red_two_id:
        type: string
        description: This is the user id of the second player playing on the red side. (Not used in single)
      red_two_position:
        type: array
        items:
          type: string
        description: The position of the red user 2. As this can vary during a game, use the notatation datetime\position
        example: [12341234/attack,12341245/defense]
#      goals properties
      goals_blue:
        type: array
        items:
          type: number
        description: We only save the goal speed. So the goal speed counts as goal. We use zero as default value, for example if a goal is manually added. This could change in the future to maps, if we decide to save the scoring player as well
      goals_red:
        type: array
        items:
          type: number
        description: We only save the goal speed. So the goal speed counts as goal. We use zero as default value, for example if a goal is manually added.

  PagedMatches:
    type: object
    properties:
      links:
        $ref: '#/definitions/Links'
      content:
        type: array
        items:
          $ref: '#/definitions/Match'
      page:
        type: object
        $ref: '#/definitions/Page'
  Links:
    type: array
    items:
      type: object
      properties:
        rel:
          type: string
          description: "The link to the first page"
        href:
          type: string
          description: "The link to the previous page."
  Page:
    type: object
    properties:
      start:
        type: integer
        description: 'The first item in the page out of the document'
      size:
        type: integer
        description: 'the size of a page'
      total_items:
        type: integer
        description: 'the number of items in the document'
      current_page:
        type: integer
        description: 'The current page number inside the document'
      total_pages:
        type: integer
        description: 'The number of total pages inside the document'






