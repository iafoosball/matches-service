#swagger generate server -f matches.yml -A matches
#go run ../../go-swagger/go-swagger/cmd/swagger/swagger.go generate server -f matches.yml -A matches
#go run main.go --port=4450
swagger: "2.0"
info:
  description: "The matches service of IAFoosball"
  version: "2.0.x Beta"
  title: "Matches-Service"
  termsOfService: "http://iafoosball.aau.dk/terms/"
  contact:
    email: "jonas.burster@gmail.com"
host: "iafoosball.aau.dk"
schemes:
- "http"
produces:
- "application/json"
paths:
  /goals/:
    get:
      summary: "Get a single goal."
      parameters:
      - in: "query"
        name: "filter"
        description: "Filter parameters for goals. Use something like ?filter=matchID=='test-1'.
        Make sure that the field exists and that if the filtered value is a string it should be encapsulated with apostrophes."
        type: "string"
        default: ""
      - in: "query"
        name: "sort"
        description: "The default is new matches at the top."
        type: "string"
        default: "endTime"
      - in: "query"
        name: "start"
        description: "The starting item of the list."
        type: "integer"
        minimum: 1
        default: 1
      - in: "query"
        name: "order"
        description: "Order ascending or descending, either ASC or DESC. DESC the default value in order to return latest matches first."
        type: "string"
        default: "DESC"
      - in: "query"
        name: "size"
        description: "The number of items to be returned. Defaults to 5, max is 10000."
        type: "integer"
        maximum: 10000
        minimum: 1
        default: 5
      responses:
        200:
          description: "Successful created goal"
          schema:
            $ref: "#/definitions/PagedGoals"
    post:
      summary: "Create a new goal. The tables only sends information gathered by it.
                This means information included here must be match id, the side of the goal and the datetime."
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Goal"
      responses:
        200:
          description: "Successful created goal"
#    /goals/{match_id}:
#      get:
#        summary: "Returns all goals for a match."
#        parameters:
#          - in: "path"
#            name: "match_id"
#            description: "The match id."
#            type: string
#            required: true
#        responses:
#          200:
#            description: "Successful."

  /matches/:
    get:
      summary: "Get a page of Recipients. Sort and Order can not be empty strings, don't define them if you don't need them."
      parameters:
      - in: "query"
        name: "filter"
        description: " Filter parameters for the matches."
        type: "string"
        default: ""
      - in: "query"
        name: "sort"
        description: "The default is new matches at the top."
        type: "string"
        default: "endTime"
      - in: "query"
        name: "start"
        description: "The starting item of the list."
        type: "integer"
        minimum: 1
        default: 1
      - in: "query"
        name: "order"
        description: "Order ascending or descending, either ASC or DESC. DESC the default value in order to return latest matches first."
        type: "string"
        default: "DESC"
      - in: "query"
        name: "size"
        description: "The number of items to be returned. Defaults to 5, max is 10000."
        type: "integer"
        maximum: 10000
        minimum: 1
        default: 5
      responses:
        200:
          description: "Successful."
          schema:
            $ref: "#/definitions/PagedMatches"

    post:
      summary: "Create a new match"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The match information."
        required: true
        schema:
          $ref: "#/definitions/Match"
      responses:
        200:
          description: "Successful."

#  /matches/{match_id}:
#    get:
#      summary: "Returns the match data for the specified match id."
#      parameters:
#        - in: "path"
#          name: "match_id"
#          description: "The match id."
#          type: string
#          required: true
#      responses:
#        200:
#          description: "Successful."


definitions:
  Goal:
    type: object
    properties:
      _id:
        type: string
        description: The goal id, which is the collection + "/" + the key
        example: "goals/01234"
      _key:
        type: string
        description: The goal key
        example: "012345"
      _from:
        type: string
        description: "DO NOT USE! Only use match id"
        example: "matches/01234"
      _to:
        type: string
        description: "DO NOT USE! Only use match id"
        example: "matches/01234"
      matchID:
        type: string
        description: the corresponding match id
        example: "01234"
      speed:
        type: string
        description: The speed of the goal
      side:
        type: string
        description: The side who scored the goal. Usually either red or blue.
      position:
        type: boolean
        description: This could be used in a double game, if the person attacking scores.
      dateTime:
        type: string
        description: The datetime in nanoseconds of the goal.
        example: "1257856852039812612 - Do we want to put additional information here?"

  Match:
    type: object
    properties:
      #      Match properties
      _id:
        type: string
        description: The match id which is the collection + "/" + the key
        example: "matches/01234"
      _key:
        type: string
        description: The match key
        example: "012345"
      tableID:
        type: string
        description: "the id of table"
      startTime:
        type: string
        description: the datetime when the game ends
      scoreBlue:
        type: integer
      scoreRed:
        type: integer
      endTime:
        type: string
        description: the datetime when the match ends
      completed:
        type: boolean
        description: Was the game completed.
      winner:
        type: string
        description: Can be either "red" or "blue"
      oneOnOne:
        type: boolean
      twoOnTwo:
        type: boolean
      twoOnOne:
        type: boolean
      tournament:
        type: boolean
      freeGame:
        type: boolean
      payed:
        type: boolean
      started:
        type: boolean
      bet:
        type: boolean
        description: "Is this game with bets"
      maxGoals:
        type: integer
        description: 'The maximum number of goals for this game. If a time is specified the first criteria which is true will stop the match.'
        default: 10
      maxTime:
        type: integer
        description: The maximum tim in sec for this game. If a max goals is specified the first criteria which is true will stop the match.
      ratedMatch:
        type: boolean
        description: A match can be rated, ie a ranked game with points, or without.
      switchPosition:
        type: boolean
        description: Switch the position after 50% of the goal (time or goals) is reached.
      #      Players properties
      lobby:
        type: array
        items:
          type: string
        description: The position of the players
      positions:
        type: object
        properties:
          blueDefense:
            type: string
            description: THe UID.
          blueAttach:
            type: string
            description: THe UID.
          redDefense:
            type: string
            description: THe UID.
          redAttack:
            type: string
            description: THe UID.

  PagedGoals:
    type: object
    properties:
      links:
        $ref: '#/definitions/Links'
      content:
        type: array
        items:
          $ref: '#/definitions/Goal'
      page:
        type: object
        $ref: '#/definitions/Page'
  PagedMatches:
    type: object
    properties:
      links:
        $ref: '#/definitions/Links'
      content:
        type: array
        items:
          $ref: '#/definitions/Match'
      page:
        type: object
        $ref: '#/definitions/Page'
  Links:
    type: array
    items:
      type: object
      properties:
        rel:
          type: string
          description: "The link to the first page"
        href:
          type: string
          description: "The link to the previous page."
  Page:
    type: object
    properties:
      start:
        type: integer
        description: 'The first item in the page out of the document'
      size:
        type: integer
        description: 'the size of a page'
      totalItems:
        type: integer
        description: 'the number of items in the document'
      currentPage:
        type: integer
        description: 'The current page number inside the document'
      totalPages:
        type: integer
        description: 'The number of total pages inside the document'







