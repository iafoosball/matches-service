#swagger generate server -f matches.yml -A matches
#go run ../../go-swagger/go-swagger/cmd/swagger/swagger.go generate server -f matches.yml -A matches
#go run main.go --port=4450
swagger: "2.0"
info:
  description: "The matches service of IAFoosball"
  version: "2.0.x"
  title: "Matches-Service"
  termsOfService: "http://iafoosball.aau.dk/terms/"
  contact:
    email: "jonas.burster@gmail.com"
host: "iafoosball.aau.dk"
schemes:
- "http"
produces:
- "application/json"
paths:
  /goals:
    post:
      summary: "Create a new goal. The tables only sends information gathered by it.
                This means information included here must be match id, the side of the goal and the datetime."
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Goal"
      responses:
        200:
          description: "Successful created goal"
  /goals/{goal_id}:
    get:
      summary: Get a single goal.
      parameters:
      - in: "path"
        name: "goal_id"
        description: The goal id.
        type: string
        required: true
      responses:
        200:
          description: "Successful created goal"
  /matches:
    post:
      summary: "Create a new match"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The match information."
        required: true
        schema:
          $ref: "#/definitions/Match"
      responses:
        200:
          description: "Successful."
  /matches/{match_id}:
    get:
      summary: "Returns the match data for the specified match id."
      parameters:
        - in: "path"
          name: "match_id"
          description: "The match id."
          type: string
          required: true
      responses:
        200:
          description: "Successful."
  /matches/users/{user_id}:
    get:
      summary: "Returns all the matches for a user id."
      parameters:
        - in: "path"
          name: "user_id"
          description: "The user id."
          type: string
          required: true
      responses:
        200:
          description: "Successful."

definitions:
  Goal:
    type: object
    properties:
      _id:
        type: string
        description: The goal id, which is the collection + "/" + the key
        example: "goals/01234"
      _key:
        type: string
        description: The goal key
        example: "012345"
      _from:
        type: string
        description: The match id
        example: "matches/01234"
      _to:
        type: string
        description: Same as from
        example: "matches/01234"
      goal_id:
        type: string
        description: The unique match id.
      side:
        type: string
        description: The side who scored the goal. Usually either red or blue.
      position_attack:
        type: boolean
        description: This could be used in a double game, if the person attacking scores.
      datetime:
        type: string
        description: The datetime in nanoseconds of the goal.
        example: "1257856852039812612 - Do we want to put additional information here?"

  Match:
    type: object
    properties:
      _id:
        type: string
        description: The match id which is the collection + "/" + the key
        example: "matches/01234"
      _key:
        type: string
        description: The match key
        example: "012345"
      blue_user_id_one:
        type: string
        description: This is the user id of the first player playing on the blue side.
      blue_user_id_two:
        type: string
        description: This is the user id of the second player playing on the blue side. (Not used in single)
      red_user_id_one:
        type: string
        description: This is the user id of the first player playing on the red side.
      red_user_id_two:
        type: string
        description: This is the user id of the second player playing on the red side. (Not used in single)
      rated_match:
        type: boolean
        description: A match can be rated, ie a ranked game with points, or without.
      position_attack:
        type: boolean
        description: If the match is a double, the position can be attack. (Not used at the moment)



