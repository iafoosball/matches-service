#swagger generate server -f matches.yml -A users
#go run main.go --port=4444
swagger: "2.0"
info:
  description: "The users service of IAFoosball"
  version: "1.0.0"
  title: "Swagger Users-Service"
  termsOfService: "http://iafoosball.io/terms/"
  contact:
    email: "jonas.burster@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "0.0.0.0:9000"
schemes:
- "http"
produces:
- "application/json"
paths:
  /users:
    post:
      summary: Create a new user.
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: The user information.
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
  /users/{user_id}:
    get:
      summary: Get a user by ID.
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
    delete:
      summary: Delte a user by ID.
      parameters:
      - name: "user_id"
        in: "path"
        description: "ID of user to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation, user deleted"
    put:
      summary: Update a user by ID.
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: The updated user information.
        required: true
        schema:
          $ref: "#/definitions/User"
      - in: "path"
        name: "user_id"
        description: "ID of user to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation, user updated"
  /friends/{user_id}:
    get:
      summary: Get all friends for a user.
      parameters:
        - in: "path"
          name: "user_id"
          description: "ID of user to making the friend request"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful created goal"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
  /friends/{user_id}/{friend_id}:
    post:
      summary: Make a new friend request. If a request is made by both users, it means he request is accepted.
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: The updated user information.
        required: true
        schema:
          $ref: "#/definitions/Friend"
      - in: "path"
        name: "user_id"
        description: "ID of user to making the friend request"
        required: true
        type: "string"
      - in: "path"
        name: "friend_id"
        description: "ID of the friend."
        required: true
        type: "string"
      responses:
        200:
          description: "Successful created goal"
    patch:
      summary: Change the boolean of a friendrequest from false to true.
      parameters:
        - in: "path"
          name: "user_id"
          description: "ID of user to making the friend request"
          required: true
          type: "string"
        - in: "path"
          name: "friend_id"
          description: "ID of the friend."
          required: true
          type: "string"
      responses:
        200:
          description: "Successful"
  /friends/{friendship_id}:
    delete:
      summary: Delete a friendship.
      parameters:
        - in: "path"
          name: "friendship_id"
          description: "ID of the friendship being deleted."
          required: true
          type: "string"
      responses:
        200:
          description: "Successful"
definitions:
  User:
    type: object
    properties:
      user_id:
        type: string
        description: The unique user id given by the system.
      firstname:
        type: string
        description: The first name of the user.
      lastname:
        type: string
        description: The last name of the user.
      username:
        type: string
        description: The username of the user.
      email:
        type: string
        description: The email of the user.
      country:
        type: string
        description: The country of the user.
      birthday:
        type: string
        description: The birthday of the user.
      password:
        type: string
        description: The password of the user.
      imageuri:
        type: string
        description: The image Uri of the user.
      usertype:
        type: string
        description: What is this?
      datetime:
        type: string
        description: The datetime when the user register.
      cardid:
        type: string
        description: The cardid of the user. What is this actually?
      creditcardnumber:
        type: string
        description: Really?
      mmr:
        type: string
        description: Match making ranking. What is this used for?
      level:
        type: string
        description: The level of the user.
  Friend:
    type: object
    properties:
      _key:
        type: string
        description: The unique friend ID. This contains the id from the requesting using and appended to it the receiving user.
        example: "0123456789"
      _from:
        type: string
        description: The user_id (with "users/" infront) of the person making the friend request.
        example: "users/01234"
      _to:
        type: string
        description: The user_id (with "users/" infront) of the person getting the friend request.
        example: "users/56789"
      datetime_request:
        type: string
        description: Should dates and accepted be handled by the server? The datetime when the request is made.
      datetime_accepted:
        type: string
        description: The datetime when the request is accepted.
        example:
      accepted:
        type: boolean
        description: Has the friend accepted the request.
